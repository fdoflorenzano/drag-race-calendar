---
import { getCollection } from 'astro:content';
import moment from "moment";

import Layout from "../layouts/Layout.astro";
import Episode from "../components/Episode";

import { processRawSeasons, extendSeasons, calculateXOffSet, calculateBaseStreaks } from "../lib/data";
import { weeksArray } from "../lib/weeks";


const allVersions = await getCollection('version');

console.log("Processes data");

const { seasons, counts } =  processRawSeasons(allVersions)

console.log({ loadedData: counts.versions });

const extendedSeasons = extendSeasons(seasons);

console.log("Seasons loaded");

const { maxOffset, graphicableSeasons } = calculateXOffSet(extendedSeasons);

console.log("offset loaded", { maxOffset });

const {episodes, streaks, generalStreaks} = calculateBaseStreaks(graphicableSeasons);

console.log("streaks loaded");

---

<Layout title="Historical Drag Race Timeline">
  <main>
    <header>
      <h1>Historical <span class="emphasis">Drag Race</span> Timeline</h1>
    </header>
    

    <p class="paragraph">
      This project attempts to show the historical weekly timeline 
      of all { counts.seasons } seasons of all {counts.versions} Drag Race versions,
      across {counts.countries} countries.
      Displaying on the right are the records for consecutive week streaks of on
      going weekly episodes.
    </p>

    <div
      class="timeline"
      style={{
        "--row-number": `${weeksArray.length + 1}`,
        "--track-number": `${maxOffset + 2}`,
      }}
    >
      <p
        class="legend"
        style={{ gridRow: 1, gridColumn: 1, justifySelf: "end" }}
      >
        Week
      </p>
      <p
        class="legend"
        style={{
          gridRow: 1,
          gridColumn: `2 / span ${maxOffset + 1}`,
          justifySelf: "center",
        }}
      >
        Seasons
      </p>
      <p
        class="legend"
        style={{ gridRow: 1, gridColumn: maxOffset + 3, justifySelf: "start" }}
      >
        Streaks
      </p>
      {
        weeksArray.map((d, i) => {
          const initial = moment
            .utc()
            .year(d.year)
            .isoWeek(d.week)
            .isoWeekday(1);
          const last = moment.utc().year(d.year).isoWeek(d.week).isoWeekday(7);
          return (
            <>
              <div
                class="gridRow"
                style={{
                  gridColumn: `2 / span ${1 + maxOffset}`,
                  gridRow: ` ${1 + weeksArray.length - i} / span 1`,
                }}
              />
              <div
                class="gridLabelContainer"
                style={{
                  gridRow: ` ${1 + weeksArray.length - i} / span 1`,
                }}
              >
                <p class="gridLabel">{last.format("DD MMM YY")}</p>
                <p class="gridLabel">{initial.format("DD MMM YY")}</p>
              </div>
            </>
          );
        })
      }

      {
        episodes.map((d) => (
          <Episode
            client:visible
            style={{
              gridColumn: `${2 + d.xOffset} / span 1`,
              gridRow: `${2 + weeksArray.length - d.week} / span 1`,
            }}
            episode={d}
          />
        ))
      }

      {
        streaks.map((d) => (
          <div
            class="streak"
            style={{
              "--label-offset": 0,
              gridColumn: `${2 + d.episodes[0].xOffset} / span 1`,
              gridRow: `${1 + weeksArray.length - d.end + 1} / span ${d.end - d.start + 1}`,
            }}
            data-season={d.season}
          >
            <div
              class="streakLine"
              style={{
                borderRadius: d.unfinished
                  ? `0 0 var(--col-width) var(--col-width)`
                  : `var(--col-width)`,
              }}
            />
            <p
              class="streakLabel"
              style={{
                "--label-offset": d.unfinished
                  ? "0px"
                  : "calc(var(--col-width) / 3)",
              }}
            >
              {d.season}
            </p>
          </div>
        ))
      }

      {
        generalStreaks.map((d) => (
          <div
            class="streak generalStreak"
            style={{
              gridColumn: `${maxOffset + 3} / span 1`,
              gridRow: `${1 + weeksArray.length - d.end + 1} / span ${d.end - d.start + 1}`,
            }}
          >
            <div class="streakLine" />
            <p
              class="streakLabel"
              style={{
                "--label-offset": "calc(var(--col-width) / 3)",
              }}
            >
              {1 + d.end - d.start} weeks
            </p>
          </div>
        ))
      }
    </div>

    <p class="paragraph">
      Data manually taken from <a href="https://www.imdb.com/">IMDB</a> and 
      <a href="https://rupaulsdragrace.fandom.com/wiki/">Drag Race Wiki</a>.
      Last updated: 10/02/2024. 
      By <a href="https://github.com/fdoflorenzano">@fdoflorenzano</a>.
    </p>
  </main>
</Layout>

<style>
  main {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: fit-content;
    margin: 0 auto;

    padding: 2rem 0;
    color: white;
  }

  @media (max-width: 500px) {
    main {
      margin: 0 20px;
    }
  }

  main header {
    align-self: start;
    font-size: 1.5rem;
    margin-bottom: 1rem;
    max-width: 10ch;
  }

  .emphasis {
    font-weight: normal;
  }

  .paragraph {
    align-self: start;
    max-width: 40ch;
    font-size: 0.8rem;
  }

  .paragraph > a,
  .paragraph > a:visited {
    color: var(--color-streak);
    font-weight: bold;
  }

  .paragraph > a:active {
    color: var(--color-general-streak);
  }

  .timeline {
    position: relative;
    display: grid;
    grid-template-columns: [labels] 1fr repeat(
        var(--track-number),
        var(--col-width)
      );
    grid-template-rows: repeat(var(--row-number), var(--col-width));
    gap: 0 var(--gap);
    margin-bottom: 3rem;

    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  }

  .legend {
    user-select: none;
    margin: 0 0 0.4rem 0;
    font-size: 0.5rem;
    align-self: end;
  }

  .gridRow {
    user-select: none;
    border-style: solid;
    border-width: 1px;

    border-color: var(--color-border);
  }

  .gridRow + .gridRow {
    border-width: 1px 1px 0 1px;
  }

  .gridLabelContainer {
    user-select: none;
    align-self: center;
    justify-self: end;
  }

  .gridLabel {
    user-select: none;
    margin: 0;
    grid-column: labels / span 1;
    font-size: 0.5rem;
    text-align: end;
  }

  @media (max-width: 500px) {
    .gridLabel {
      font-size: 0.3rem;
    }
  }

  .streak {
    user-select: none;
    position: relative;
    overflow-x: visible;
  }

  .streakLine {
    user-select: none;
    height: 100%;
    background: var(--color-streak);
  }

  .generalStreak .streakLine {
    background: var(--color-general-streak);
    border-radius: var(--col-width);
  }

  .streakLabel {
    user-select: none;
    position: absolute;
    left: 0;
    top: 0;
    margin: 0;
    font-size: 0.6rem;
    transform-origin: 0 0;
    width: max-content;
    transform: rotate(90deg) translateX(calc(0.1rem + var(--label-offset)))
      translateY(calc(-1 * (var(--col-width) + 0.8rem)));
  }

  @media (max-width: 500px) {
    .streakLabel {
      transform: rotate(90deg) translateX(calc(0.1rem + var(--label-offset)))
        translateY(calc(-1 * (var(--col-width) + 0.7rem)));
      font-size: 0.5rem;
    }
  }
</style>
